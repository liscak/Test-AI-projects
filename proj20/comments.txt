The main idea in file "m3.py" was to represent every class with a learnable parameter/tensor.
In that model were 3 classes, in which each class would be represented by a parameter tensor of size 10. (ten random numbers)
Every parameter in the parameter list is a parameter tensor representing a class.
The network/model similariy searches/compares the "x" variable from the "block" layer/module with all classes/parameter tensors inside
the parameter list, this part returns a list/tensor of distance values. The distance values go trough the softmax function,
so the values are in the range between 0 to 1 inclusive, the network returned this tensor as the final output.
It was named "unlimited classes for neural networks" because you could add an theoretically unlimited number of classes at
model initialization time or if tweaked on the fly.
